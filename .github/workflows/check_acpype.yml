# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
name: check_acpype
on:
   push:
      branches:
         - master
   pull_request:
      branches:
         - master
jobs:
   build:
      runs-on: ubuntu-latest
      strategy:
         matrix:
            python-version: ["3.6", "3.7", "3.8", "3.9", "3.10"]

      steps:
         - uses: actions/checkout@v2

         - name: Set up Python ${{ matrix.python-version }}
           uses: actions/setup-python@v2
           with:
              python-version: ${{ matrix.python-version }}

         - name: Cache pip
           uses: actions/cache@v2
           with:
              # This path is specific to Ubuntu
              path: ~/.cache/pip
              # Look to see if there is a cache hit for the corresponding requirements file
              key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
              restore-keys: |
                 ${{ runner.os }}-pip-
                 ${{ runner.os }}-

         - name: Set Env
           run: |
              echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
              echo "AMBERHOME=$PWD/acpype/amber21-11_linux" >> $GITHUB_ENV
              echo "$PWD/acpype/amber21-11_linux/bin" >> $GITHUB_PATH

         - name: Install dependencies
           run: |
              sudo apt-get update
              sudo apt-get install -y --no-install-recommends tzdata libarpack++2-dev

         - name: Install OpenBabel
           run: |
              sudo apt-get install --no-install-recommends -y openbabel

         - name: Install Pip
           run: |
              sudo apt-get install --no-install-recommends -y python3-pip
              python3 -m pip install --upgrade pip
              python3 -m pip install --upgrade openbabel-wheel
              if [ -f requirements.txt ]; then python3 -m pip install -r requirements.txt; fi
              # chmod +x acpype/acpype.py
              # ln -s $PWD/run_acpype.py /usr/local/bin/acpype

         - name: Lint with flake8
           run: flake8 -v --count

         - name: Check format with black
           run: black --diff --check .

         - name: Test with PyTest
           run: |
              # acpype -di test/AAA.pdb -c gas
              pytest --color=yes

         - name: Get current date
           id: date
           run: echo "::set-output name=date::$(date +'%Y.%-m.%-d')"

         - name: Create tag
           # will only create a new release if the commit message is 'new_release' to master branch
           if: github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, 'new_tag')
           uses: actions/github-script@v3
           with:
              # github-token: ${{ github.token }} # optional
              script: |
                 github.git.createRef({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 ref: "refs/tags/${{ steps.date.outputs.date }}",
                 sha: context.sha
                 })

         - name: Create Release
           # will only create a new release if the commit message is 'new_release' to master branch
           if: github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, 'new_release')
           id: create_release
           uses: actions/create-release@v1
           env:
              # This token is provided by Actions, you do not need to create your own token
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
           with:
              tag_name: ${{ steps.date.outputs.date }}
              release_name: Release ${{ steps.date.outputs.date }}
              draft: false
              prerelease: false
